<<: !include chip.esp8266.yaml
<<: !include common.yaml
sensor: !include_dir_merge_list nodemcu.v2.sensor

# Custom-made garage door controller

# nodemcu1-pending.yaml
#substitutions:
#  id: nodemcu1
#  plug_type: nodemcu.v2
#  board: nodemcuv2
#  display_name: "Garage Door"
#<<: !include "esphome_templates/nodemcu.v2.garagedoor.yaml"

# Garage opening relay
# Wired directly to the two wire leads of the garage, in parallel to any existing button control
# Relay Signal -> NodeMCU Pin D1/GPIO5
switch:
- platform: gpio
  pin: D1
  id: relay
  restore_mode: "ALWAYS_OFF"

### Going to only monitor for "closed", will always assume open

binary_sensor:
# Garage "open" endstop switch
# Either magnet or micro switch of some form, attached to be pressed when garage is open
# Switch COM -> NodeMCU Pin D2/GPIO4
# Switch COM -> 10k Ohm Resistor -> Ground
# Switch NO -> NodeMCU Pin 3v3
- platform: gpio
  pin: D2
  id: endstop_open

# Garage "closed" endstop switch
# Either magnet or micro switch of some form, attached to be pressed when garage is closed
# Switch COM -> NodeMCU Pin D5/GPIO14
# Switch COM -> 10k Ohm Resistor -> Ground
# Switch NO -> NodeMCU Pin 3v3
- platform: gpio
  pin: D5
  id: endstop_close

# Garage door cover
cover:
- platform: template
  name: "${display_name}"
  device_class: garage
  optimistic: true
  has_position: false

  lambda: !lambda |-
      if (id(endstop_close).state) {
        return COVER_CLOSED;
      } else {
        return COVER_OPEN;
      }

  open_action:
  - switch.turn_on: relay
  - delay: 0.1s
  - switch.turn_off: relay

  close_action:
  - switch.turn_on: relay
  - delay: 0.1s
  - switch.turn_off: relay

#  stop_action:
#  - delay: 0.1s
